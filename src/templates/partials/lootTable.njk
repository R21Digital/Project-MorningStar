{# Loot Table Partial Template #}
{# Usage: {% include "partials/lootTable.njk" with { lootData: lootItems, bossName: "Boss Name" } %} #}

<div class="loot-table-component">
  {% if lootData and lootData.length > 0 %}
    <div class="loot-table-header">
      <h4 class="loot-table-title">{{ bossName }} - Loot Table</h4>
      <div class="loot-table-stats">
        <span class="total-items">{{ lootData.length }} items</span>
        <span class="rare-items">{{ lootData | selectattr('rarity', 'equalto', 'rare') | list | length }} rare</span>
        <span class="epic-items">{{ lootData | selectattr('rarity', 'equalto', 'epic') | list | length }} epic</span>
        <span class="legendary-items">{{ lootData | selectattr('rarity', 'equalto', 'legendary') | list | length }} legendary</span>
      </div>
    </div>

    <div class="loot-grid">
      {% for item in lootData %}
        <div class="loot-card" 
             data-type="{{ item.type }}" 
             data-rarity="{{ item.rarity }}"
             data-professions="{{ item.profession_relevance | join(',') }}">
          
          <div class="loot-card-header">
            <div class="loot-image-container">
              <img src="{{ item.image }}" 
                   alt="{{ item.name }}" 
                   class="loot-image"
                   onerror="this.src='/assets/loot/default.png'">
              <div class="loot-rarity-badge {{ item.rarity }}">
                {{ item.rarity | title }}
              </div>
            </div>
            
            <div class="loot-info">
              <h5 class="loot-name">{{ item.name }}</h5>
              <div class="loot-meta">
                <span class="loot-type-badge {{ item.type }}">
                  {{ item.type | title }}
                </span>
                <span class="loot-drop-rate">
                  {{ item.drop_chance }}%
                </span>
              </div>
            </div>
          </div>
          
          <div class="loot-card-body">
            <p class="loot-description">{{ item.use_case }}</p>
            
            {% if item.profession_relevance and item.profession_relevance.length > 0 %}
              <div class="loot-professions">
                <span class="professions-label">Relevant Professions:</span>
                <div class="profession-tags">
                  {% for profession in item.profession_relevance %}
                    <span class="profession-tag">{{ profession | title }}</span>
                  {% endfor %}
                </div>
              </div>
            {% endif %}
          </div>
          
          <div class="loot-card-footer">
            <div class="loot-actions">
              <button class="btn btn-sm btn-outline-primary loot-details-btn" 
                      data-item="{{ item.name | lower | replace(' ', '-') }}">
                View Details
              </button>
              <button class="btn btn-sm btn-outline-secondary loot-wiki-btn"
                      onclick="window.open('https://swgr.org/wiki/{{ item.name | lower | replace(' ', '_') }}', '_blank')">
                Wiki
              </button>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
    
    {# Quick Stats Summary #}
    <div class="loot-summary">
      <div class="summary-stats">
        <div class="stat-item">
          <span class="stat-label">Average Drop Rate:</span>
          <span class="stat-value">{{ (lootData | map('drop_chance') | sum) / lootData.length | round(1) }}%</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Rarest Item:</span>
          <span class="stat-value">
            {% set rarest = lootData | sort('drop_chance') | first %}
            {{ rarest.name }} ({{ rarest.drop_chance }}%)
          </span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Most Common Type:</span>
          <span class="stat-value">
            {% set typeCounts = {} %}
            {% for item in lootData %}
              {% set typeCounts = typeCounts | merge({item.type: (typeCounts[item.type] or 0) + 1}) %}
            {% endfor %}
            {% set mostCommon = typeCounts | dictsort | last %}
            {{ mostCommon[0] | title }} ({{ mostCommon[1] }} items)
          </span>
        </div>
      </div>
    </div>
    
  {% else %}
    <div class="loot-table-empty">
      <div class="empty-state">
        <i class="empty-icon">ðŸ“¦</i>
        <h5>No Loot Data Available</h5>
        <p>No loot information has been recorded for this encounter yet.</p>
      </div>
    </div>
  {% endif %}
</div>

{# Loot Item Detail Modal Template #}
<div class="loot-modal" id="lootModal" style="display: none;">
  <div class="modal-content">
    <div class="modal-header">
      <h4 class="modal-title">Loot Item Details</h4>
      <button class="modal-close" onclick="closeLootModal()">&times;</button>
    </div>
    <div class="modal-body" id="lootModalBody">
      <!-- Content will be populated by JavaScript -->
    </div>
  </div>
</div>

<script>
// Loot table functionality
document.addEventListener('DOMContentLoaded', function() {
  // Initialize loot table interactions
  initializeLootTable();
});

function initializeLootTable() {
  // Add click handlers for loot detail buttons
  document.querySelectorAll('.loot-details-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const itemName = this.dataset.item;
      showLootDetails(itemName);
    });
  });
  
  // Add hover effects for loot cards
  document.querySelectorAll('.loot-card').forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.classList.add('loot-card-hover');
    });
    
    card.addEventListener('mouseleave', function() {
      this.classList.remove('loot-card-hover');
    });
  });
}

function showLootDetails(itemName) {
  // Find the loot item data
  const lootCard = document.querySelector(`[data-item="${itemName}"]`).closest('.loot-card');
  const itemData = {
    name: lootCard.querySelector('.loot-name').textContent,
    type: lootCard.dataset.type,
    rarity: lootCard.dataset.rarity,
    dropChance: lootCard.querySelector('.loot-drop-rate').textContent,
    description: lootCard.querySelector('.loot-description').textContent,
    professions: lootCard.dataset.professions.split(',')
  };
  
  // Populate modal content
  const modalBody = document.getElementById('lootModalBody');
  modalBody.innerHTML = `
    <div class="loot-detail-content">
      <div class="detail-header">
        <h5>${itemData.name}</h5>
        <div class="detail-meta">
          <span class="detail-type ${itemData.type}">${itemData.type}</span>
          <span class="detail-rarity ${itemData.rarity}">${itemData.rarity}</span>
          <span class="detail-drop-rate">${itemData.dropChance} drop rate</span>
        </div>
      </div>
      
      <div class="detail-description">
        <h6>Use Case:</h6>
        <p>${itemData.description}</p>
      </div>
      
      <div class="detail-professions">
        <h6>Relevant Professions:</h6>
        <div class="profession-list">
          ${itemData.professions.map(prof => `<span class="profession-badge">${prof}</span>`).join('')}
        </div>
      </div>
      
      <div class="detail-actions">
        <button class="btn btn-primary" onclick="window.open('https://swgr.org/wiki/${itemData.name.toLowerCase().replace(/\s+/g, '_')}', '_blank')">
          View on Wiki
        </button>
        <button class="btn btn-secondary" onclick="addToWishlist('${itemData.name}')">
          Add to Wishlist
        </button>
      </div>
    </div>
  `;
  
  // Show modal
  document.getElementById('lootModal').style.display = 'block';
}

function closeLootModal() {
  document.getElementById('lootModal').style.display = 'none';
}

function addToWishlist(itemName) {
  // Implementation for wishlist functionality
  console.log(`Added ${itemName} to wishlist`);
  // You can implement localStorage or API call here
}

// Close modal when clicking outside
window.addEventListener('click', function(event) {
  const modal = document.getElementById('lootModal');
  if (event.target === modal) {
    closeLootModal();
  }
});
</script> 