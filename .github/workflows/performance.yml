name: Performance Regression Tests

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'core/**'
      - 'tests/**'
      - 'requirements*.txt'
  push:
    branches: [main]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  performance-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comparison
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr libx11-dev libxext-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark pytest-profiling memory-profiler psutil
          
      - name: Create performance baseline
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          python -m pytest tests/performance/ --benchmark-json=baseline-${{ matrix.python-version }}.json --benchmark-only
          
      - name: Store baseline
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: performance-baseline-${{ matrix.python-version }}
          path: baseline-${{ matrix.python-version }}.json
          retention-days: 30
          
      - name: Download baseline
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@v3
        with:
          name: performance-baseline-${{ matrix.python-version }}
          path: .
        continue-on-error: true
        
      - name: Run performance tests
        run: |
          python -m pytest tests/performance/ --benchmark-json=current-${{ matrix.python-version }}.json --benchmark-only -v
          
      - name: Compare performance
        if: github.event_name == 'pull_request'
        run: |
          python scripts/qa/compare_performance.py baseline-${{ matrix.python-version }}.json current-${{ matrix.python-version }}.json
        continue-on-error: true
        
      - name: Memory profiling
        run: |
          python -m memory_profiler src/main.py --profile debug_profile --mode medic --max_loops 1 > memory-profile-${{ matrix.python-version }}.txt
        continue-on-error: true
        
      - name: CPU profiling
        run: |
          python -m cProfile -o cpu-profile-${{ matrix.python-version }}.prof src/main.py --profile debug_profile --mode medic --max_loops 1
          python -c "import pstats; p = pstats.Stats('cpu-profile-${{ matrix.python-version }}.prof'); p.sort_stats('cumtime'); p.print_stats(20)" > cpu-profile-${{ matrix.python-version }}.txt
        continue-on-error: true
        
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.python-version }}
          path: |
            current-${{ matrix.python-version }}.json
            memory-profile-${{ matrix.python-version }}.txt
            cpu-profile-${{ matrix.python-version }}.txt
            cpu-profile-${{ matrix.python-version }}.prof
          retention-days: 7
          
      - name: Performance regression check
        if: github.event_name == 'pull_request'
        run: |
          python scripts/qa/check_regression.py baseline-${{ matrix.python-version }}.json current-${{ matrix.python-version }}.json --threshold 20
        continue-on-error: false  # Fail PR if significant regression
        
  load-testing:
    runs-on: ubuntu-latest
    needs: performance-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust
          
      - name: Run load tests
        run: |
          # Start MS11 dashboard in background
          python dashboard/app.py --port 8080 &
          sleep 10  # Wait for startup
          
          # Run load tests
          locust -f tests/load/locustfile.py --host=http://localhost:8080 --users 10 --spawn-rate 2 --run-time 60s --headless --csv=load-test-results
        continue-on-error: true
        
      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-test-results*
          retention-days: 7