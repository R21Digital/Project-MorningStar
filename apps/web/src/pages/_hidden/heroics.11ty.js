const yaml = require('js-yaml');
const fs = require('fs');
const path = require('path');

module.exports = class {
  data() {
    return {
      title: "Heroics Loot Tables",
      description: "Comprehensive loot tables for all heroic encounters across the galaxy",
      layout: "base.11ty.js",
      eleventyComputed: {
        heroicsData: () => {
          try {
            const yamlPath = path.join(__dirname, '../data/loot/heroics.yml');
            const fileContents = fs.readFileSync(yamlPath, 'utf8');
            return yaml.load(fileContents);
          } catch (error) {
            console.error('Error loading heroics data:', error);
            return { heroics: {} };
          }
        }
      }
    };
  }

  render(data) {
    const { heroicsData } = data;
    const planets = Object.keys(heroicsData.heroics || {});
    
    return `
      <div class="heroics-container">
        <header class="heroics-header">
          <h1>Heroics Loot Tables</h1>
          <p class="heroics-subtitle">Comprehensive loot information for all heroic encounters</p>
          <div class="source-attribution">
            <small>Generated by SWGDB</small>
          </div>
        </header>

        <!-- Filter Controls -->
        <div class="filter-controls">
          <div class="filter-group">
            <label for="planet-filter">Planet:</label>
            <select id="planet-filter" class="filter-select">
              <option value="">All Planets</option>
              ${planets.map(planet => `
                <option value="${planet}">${planet.charAt(0).toUpperCase() + planet.slice(1)}</option>
              `).join('')}
            </select>
          </div>

          <div class="filter-group">
            <label for="boss-filter">Boss:</label>
            <select id="boss-filter" class="filter-select">
              <option value="">All Bosses</option>
            </select>
          </div>

          <div class="filter-group">
            <label for="loot-type-filter">Loot Type:</label>
            <select id="loot-type-filter" class="filter-select">
              <option value="">All Types</option>
              ${(heroicsData.loot_types || []).map(type => `
                <option value="${type}">${type.charAt(0).toUpperCase() + type.slice(1)}</option>
              `).join('')}
            </select>
          </div>

          <div class="filter-group">
            <label for="rarity-filter">Rarity:</label>
            <select id="rarity-filter" class="filter-select">
              <option value="">All Rarities</option>
              ${(heroicsData.rarity_levels || []).map(rarity => `
                <option value="${rarity}">${rarity.charAt(0).toUpperCase() + rarity.slice(1)}</option>
              `).join('')}
            </select>
          </div>

          <div class="filter-group">
            <label for="profession-filter">Profession:</label>
            <select id="profession-filter" class="filter-select">
              <option value="">All Professions</option>
              ${(heroicsData.professions || []).map(profession => `
                <option value="${profession}">${profession.charAt(0).toUpperCase() + profession.slice(1)}</option>
              `).join('')}
            </select>
          </div>
        </div>

        <!-- Heroics Content -->
        <div class="heroics-content">
          ${planets.map(planet => `
            <div class="planet-section" data-planet="${planet}">
              <h2 class="planet-title">${planet.charAt(0).toUpperCase() + planet.slice(1)} Heroics</h2>
              
              ${heroicsData.heroics[planet].map(boss => `
                <div class="boss-section" data-boss="${boss.boss.toLowerCase().replace(/\s+/g, '-')}">
                  <div class="boss-header">
                    <h3 class="boss-name">${boss.boss}</h3>
                    <div class="boss-info">
                      <span class="boss-location">${boss.location}</span>
                      <span class="boss-level">Level ${boss.level}</span>
                    </div>
                  </div>
                  
                  <div class="loot-table">
                    <div class="loot-header">
                      <h4>Loot Table</h4>
                    </div>
                    
                    <div class="loot-items">
                      ${boss.loot.map(item => `
                        <div class="loot-item" 
                             data-type="${item.type}" 
                             data-rarity="${item.rarity}"
                             data-professions="${item.profession_relevance.join(',')}">
                          <div class="loot-item-header">
                            <div class="loot-item-image">
                              <img src="${item.image}" alt="${item.name}" onerror="this.src='/assets/loot/default.png'">
                            </div>
                            <div class="loot-item-info">
                              <h5 class="loot-item-name">${item.name}</h5>
                              <div class="loot-item-meta">
                                <span class="loot-type ${item.type}">${item.type}</span>
                                <span class="loot-rarity ${item.rarity}">${item.rarity}</span>
                                <span class="loot-drop-chance">${item.drop_chance}%</span>
                              </div>
                            </div>
                          </div>
                          
                          <div class="loot-item-details">
                            <p class="loot-use-case">${item.use_case}</p>
                            <div class="loot-professions">
                              <strong>Relevant Professions:</strong>
                              ${item.profession_relevance.map(prof => `
                                <span class="profession-tag">${prof}</span>
                              `).join('')}
                            </div>
                          </div>
                        </div>
                      `).join('')}
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          `).join('')}
        </div>
      </div>

      <script>
        // Filter functionality
        document.addEventListener('DOMContentLoaded', function() {
          const planetFilter = document.getElementById('planet-filter');
          const bossFilter = document.getElementById('boss-filter');
          const lootTypeFilter = document.getElementById('loot-type-filter');
          const rarityFilter = document.getElementById('rarity-filter');
          const professionFilter = document.getElementById('profession-filter');

          // Populate boss filter based on planet selection
          planetFilter.addEventListener('change', function() {
            const selectedPlanet = this.value;
            const bossOptions = ['<option value="">All Bosses</option>'];
            
            if (selectedPlanet) {
              const planetSection = document.querySelector(\`[data-planet="\${selectedPlanet}"]\`);
              if (planetSection) {
                const bosses = planetSection.querySelectorAll('.boss-section');
                bosses.forEach(boss => {
                  const bossName = boss.querySelector('.boss-name').textContent;
                  const bossValue = boss.dataset.boss;
                  bossOptions.push(\`<option value="\${bossValue}">\${bossName}</option>\`);
                });
              }
            }
            
            bossFilter.innerHTML = bossOptions.join('');
            applyFilters();
          });

          // Apply filters
          function applyFilters() {
            const selectedPlanet = planetFilter.value;
            const selectedBoss = bossFilter.value;
            const selectedType = lootTypeFilter.value;
            const selectedRarity = rarityFilter.value;
            const selectedProfession = professionFilter.value;

            // Filter planet sections
            document.querySelectorAll('.planet-section').forEach(planet => {
              const planetName = planet.dataset.planet;
              const planetVisible = !selectedPlanet || planetName === selectedPlanet;
              planet.style.display = planetVisible ? 'block' : 'none';
            });

            // Filter boss sections
            document.querySelectorAll('.boss-section').forEach(boss => {
              const bossName = boss.dataset.boss;
              const bossVisible = !selectedBoss || bossName === selectedBoss;
              boss.style.display = bossVisible ? 'block' : 'none';
            });

            // Filter loot items
            document.querySelectorAll('.loot-item').forEach(item => {
              const itemType = item.dataset.type;
              const itemRarity = item.dataset.rarity;
              const itemProfessions = item.dataset.professions.split(',');
              
              const typeMatch = !selectedType || itemType === selectedType;
              const rarityMatch = !selectedRarity || itemRarity === selectedRarity;
              const professionMatch = !selectedProfession || itemProfessions.includes(selectedProfession);
              
              item.style.display = (typeMatch && rarityMatch && professionMatch) ? 'block' : 'none';
            });
          }

          // Add event listeners for all filters
          [bossFilter, lootTypeFilter, rarityFilter, professionFilter].forEach(filter => {
            filter.addEventListener('change', applyFilters);
          });
        });
      </script>
    `;
  }
}; 