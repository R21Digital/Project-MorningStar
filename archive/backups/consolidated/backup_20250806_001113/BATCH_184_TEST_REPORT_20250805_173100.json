{
  "test_suite": "Batch 184 Analytics Verification",
  "timestamp": "2025-08-05T17:31:00.324952",
  "total_tests": 28,
  "passed_tests": 21,
  "failed_tests": 7,
  "error_tests": 0,
  "success_rate": 75.0,
  "failures": [
    {
      "test": "test_accessibility_features (__main__.TestAnalyticsVerification.test_accessibility_features)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 410, in test_accessibility_features\n    self.assertGreaterEqual(len(found_features), 1,\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n                           f\"Should have at least 1 accessibility feature, found {len(found_features)}\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0 not greater than or equal to 1 : Should have at least 1 accessibility feature, found 0\n"
    },
    {
      "test": "test_error_tracking (__main__.TestAnalyticsVerification.test_error_tracking)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 340, in test_error_tracking\n    self.assertGreaterEqual(len(found_features), 2,\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n                           f\"Should have at least 2 error tracking features, found {len(found_features)}\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0 not greater than or equal to 2 : Should have at least 2 error tracking features, found 0\n"
    },
    {
      "test": "test_google_analytics_script_present (__main__.TestAnalyticsVerification.test_google_analytics_script_present)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 50, in test_google_analytics_script_present\n    self.assertEqual(len(measurement_id), 10,\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n                    \"Measurement ID should be 10 characters\")\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 12 != 10 : Measurement ID should be 10 characters\n"
    },
    {
      "test": "test_mobile_optimization (__main__.TestAnalyticsVerification.test_mobile_optimization)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 386, in test_mobile_optimization\n    self.assertGreaterEqual(len(found_features), 2,\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n                           f\"Should have at least 2 mobile features, found {len(found_features)}\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0 not greater than or equal to 2 : Should have at least 2 mobile features, found 0\n"
    },
    {
      "test": "test_performance_tracking (__main__.TestAnalyticsVerification.test_performance_tracking)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 110, in test_performance_tracking\n    self.assertIn(feature, content,\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n                 f\"Performance feature '{feature}' should be present\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 'page_performance' not found in '<!-- Google Analytics v4 -->\\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-Q4ZZ5SFJC0\"></script>\\n<script>\\n  window.dataLayer = window.dataLayer || [];\\n  function gtag(){dataLayer.push(arguments);}\\n  gtag(\\'js\\', new Date());\\n  gtag(\\'config\\', \\'G-Q4ZZ5SFJC0\\', {\\n    // Enhanced configuration for better tracking\\n    page_title: document.title,\\n    page_location: window.location.href,\\n    send_page_view: true,\\n    // Custom dimensions for SWGDB tracking\\n    custom_map: {\\n      \\'custom_dimension1\\': \\'user_type\\',\\n      \\'custom_dimension2\\': \\'page_category\\',\\n      \\'custom_dimension3\\': \\'content_type\\'\\n    }\\n  });\\n\\n  // Track custom events for SWGDB\\n  function trackSWGDBEvent(eventName, parameters = {}) {\\n    gtag(\\'event\\', eventName, {\\n      event_category: \\'SWGDB\\',\\n      event_label: window.location.pathname,\\n      ...parameters\\n    });\\n  }\\n\\n  // Track page views with custom data\\n  gtag(\\'event\\', \\'page_view\\', {\\n    page_title: document.title,\\n    page_location: window.location.href,\\n    page_category: getPageCategory(),\\n    content_type: getContentType()\\n  });\\n\\n  // Helper functions for tracking\\n  function getPageCategory() {\\n    const path = window.location.pathname;\\n    if (path.includes(\\'/heroics/\\')) return \\'Heroics\\';\\n    if (path.includes(\\'/loot/\\')) return \\'Loot\\';\\n    if (path.includes(\\'/builds/\\')) return \\'Builds\\';\\n    if (path.includes(\\'/tools/\\')) return \\'Tools\\';\\n    if (path.includes(\\'/admin/\\')) return \\'Admin\\';\\n    return \\'General\\';\\n  }\\n\\n  function getContentType() {\\n    const path = window.location.pathname;\\n    if (path.endsWith(\\'.html\\')) return \\'HTML\\';\\n    if (path.includes(\\'/api/\\')) return \\'API\\';\\n    return \\'Page\\';\\n  }\\n\\n  // Track user interactions\\n  document.addEventListener(\\'DOMContentLoaded\\', function() {\\n    // Track filter usage\\n    const filterButtons = document.querySelectorAll(\\'.filter-btn\\');\\n    filterButtons.forEach(btn => {\\n      btn.addEventListener(\\'click\\', function() {\\n        trackSWGDBEvent(\\'filter_used\\', {\\n          filter_type: this.dataset.filter || this.dataset.rarity,\\n          filter_value: this.textContent.trim()\\n        });\\n      });\\n    });\\n\\n    // Track search usage\\n    const searchBoxes = document.querySelectorAll(\\'input[type=\"search\"], .search-box\\');\\n    searchBoxes.forEach(box => {\\n      box.addEventListener(\\'input\\', function() {\\n        if (this.value.length > 2) {\\n          trackSWGDBEvent(\\'search_performed\\', {\\n            search_term: this.value,\\n            search_location: window.location.pathname\\n          });\\n        }\\n      });\\n    });\\n\\n    // Track navigation clicks\\n    const navLinks = document.querySelectorAll(\\'a[href]\\');\\n    navLinks.forEach(link => {\\n      link.addEventListener(\\'click\\', function() {\\n        if (this.href && !this.href.includes(\\'javascript:\\')) {\\n          trackSWGDBEvent(\\'navigation_click\\', {\\n            link_text: this.textContent.trim(),\\n            link_url: this.href,\\n            link_location: window.location.pathname\\n          });\\n        }\\n      });\\n    });\\n\\n    // Track form submissions\\n    const forms = document.querySelectorAll(\\'form\\');\\n    forms.forEach(form => {\\n      form.addEventListener(\\'submit\\', function() {\\n        trackSWGDBEvent(\\'form_submitted\\', {\\n          form_id: this.id || \\'unknown\\',\\n          form_action: this.action\\n        });\\n      });\\n    });\\n  });\\n\\n  // Track performance metrics\\n  window.addEventListener(\\'load\\', function() {\\n    // Track page load time\\n    if (window.performance && window.performance.timing) {\\n      const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;\\n      trackSWGDBEvent(\\'page_load_time\\', {\\n        load_time_ms: loadTime,\\n        page_url: window.location.href\\n      });\\n    }\\n\\n    // Track user engagement\\n    let timeOnPage = 0;\\n    const engagementInterval = setInterval(function() {\\n      timeOnPage += 10;\\n      if (timeOnPage % 30 === 0) { // Track every 30 seconds\\n        trackSWGDBEvent(\\'user_engagement\\', {\\n          time_on_page_seconds: timeOnPage,\\n          page_url: window.location.href\\n        });\\n      }\\n    }, 10000); // Check every 10 seconds\\n\\n    // Clear interval when user leaves\\n    window.addEventListener(\\'beforeunload\\', function() {\\n      clearInterval(engagementInterval);\\n      trackSWGDBEvent(\\'page_exit\\', {\\n        time_on_page_seconds: timeOnPage,\\n        page_url: window.location.href\\n      });\\n    });\\n  });\\n</script>\\n\\n<!-- Google Search Console Verification -->\\n<meta name=\"google-site-verification\" content=\"your-google-site-verification-code-here\" />\\n\\n<!-- Additional SEO and Performance Meta Tags -->\\n<meta name=\"robots\" content=\"index, follow\">\\n<meta name=\"author\" content=\"SWGDB Team\">\\n<meta name=\"description\" content=\"Star Wars Galaxies Database - Comprehensive tools and information for SWG players\">\\n<meta name=\"keywords\" content=\"Star Wars Galaxies, SWG, database, tools, heroics, loot, builds, gaming\">\\n\\n<!-- Open Graph Meta Tags for Social Media -->\\n<meta property=\"og:title\" content=\"SWGDB - Star Wars Galaxies Database\">\\n<meta property=\"og:description\" content=\"Comprehensive tools and information for Star Wars Galaxies players\">\\n<meta property=\"og:type\" content=\"website\">\\n<meta property=\"og:url\" content=\"https://swgdb.com\">\\n<meta property=\"og:site_name\" content=\"SWGDB\">\\n\\n<!-- Twitter Card Meta Tags -->\\n<meta name=\"twitter:card\" content=\"summary_large_image\">\\n<meta name=\"twitter:title\" content=\"SWGDB - Star Wars Galaxies Database\">\\n<meta name=\"twitter:description\" content=\"Comprehensive tools and information for Star Wars Galaxies players\">\\n<meta name=\"twitter:site\" content=\"@swgdb\">\\n\\n<!-- Structured Data for Rich Snippets -->\\n<script type=\"application/ld+json\">\\n{\\n  \"@context\": \"https://schema.org\",\\n  \"@type\": \"WebSite\",\\n  \"name\": \"SWGDB\",\\n  \"description\": \"Star Wars Galaxies Database - Comprehensive tools and information for SWG players\",\\n  \"url\": \"https://swgdb.com\",\\n  \"potentialAction\": {\\n    \"@type\": \"SearchAction\",\\n    \"target\": \"https://swgdb.com/search?q={search_term_string}\",\\n    \"query-input\": \"required name=search_term_string\"\\n    }\\n} \\n</script>\\n\\n<!-- Fallback noscript version for privacy-aware users -->\\n<noscript>\\n  <iframe src=\"https://www.googletagmanager.com/ns.html?id=G-Q4ZZ5SFJC0\"\\n          height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>\\n</noscript> ' : Performance feature 'page_performance' should be present\n"
    },
    {
      "test": "test_privacy_compliance (__main__.TestAnalyticsVerification.test_privacy_compliance)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 363, in test_privacy_compliance\n    self.assertGreaterEqual(len(found_features), 1,\n    ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^\n                           f\"Should have at least 1 privacy feature, found {len(found_features)}\")\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 0 not greater than or equal to 1 : Should have at least 1 privacy feature, found 0\n"
    },
    {
      "test": "test_sitemap_xml_structure (__main__.TestAnalyticsVerification.test_sitemap_xml_structure)",
      "error": "Traceback (most recent call last):\n  File \"D:\\Software Projects\\ms11\\Project-MorningStar\\test_batch_184_analytics_verification.py\", line 206, in test_sitemap_xml_structure\n    self.assertIn('sitemaps.org', root.get('xmlns', ''),\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 \"Should have correct sitemap namespace\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 'sitemaps.org' not found in '' : Should have correct sitemap namespace\n"
    }
  ],
  "errors": []
}