const yaml = require('js-yaml');
const fs = require('fs');
const path = require('path');
const YamlLoader = require('../utils/yaml_loader.js');

module.exports = class {
  constructor() {
    this.yamlLoader = new YamlLoader();
    this.lootData = null;
    this.liveLootData = null;
  }

  data() {
    this.loadAllLootData();
    this.loadLiveLootData();
    return {
      title: "Heroics Loot Table - SWGDB",
      description: "Comprehensive loot table for all heroic instances in Star Wars Galaxies Restoration",
      layout: "base.njk",
      permalink: "/heroics/loot-table/",
      heroics: this.lootData?.heroics || {},
      rarityLevels: this.lootData?.rarity_levels || {},
      lootTypes: this.lootData?.loot_types || {},
      professionRelevance: this.lootData?.profession_relevance || {},
      metadata: this.lootData?.metadata || {},
      sourceInfo: this.lootData?.source_info || {},
      liveLootData: this.liveLootData || [],
      hasLiveData: (this.liveLootData || []).length > 0
    };
  }

  loadAllLootData() {
    if (this.lootData) {
      return this.lootData;
    }

    try {
      this.lootData = this.yamlLoader.loadHeroicsLoot();
      this.validateLootData();
      return this.lootData;
    } catch (error) {
      console.error('Error loading loot data:', error);
      this.lootData = this.getDefaultLootData();
      return this.lootData;
    }
  }

  validateLootData() {
    if (!this.lootData) {
      throw new Error('No loot data loaded');
    }

    const requiredSections = ['heroics', 'rarity_levels', 'loot_types'];
    for (const section of requiredSections) {
      if (!this.lootData[section]) {
        console.warn(`Missing required section: ${section}`);
      }
    }

    let totalItems = 0;
    for (const heroic of Object.values(this.lootData.heroics || {})) {
      for (const boss of heroic.bosses || []) {
        totalItems += (boss.loot || []).length;
      }
    }

    console.log(`Loaded ${Object.keys(this.lootData.heroics || {}).length} heroics with ${totalItems} total loot items`);
  }

  getDefaultLootData() {
    return {
      heroics: {},
      rarity_levels: {
        common: { color: '#9d9d9d', drop_chance_range: [15, 35] },
        uncommon: { color: '#1eff00', drop_chance_range: [8, 20] },
        rare: { color: '#0070dd', drop_chance_range: [3, 12] },
        epic: { color: '#a335ee', drop_chance_range: [1, 8] },
        legendary: { color: '#ff8000', drop_chance_range: [0.5, 3] }
      },
      loot_types: {
        weapon: { description: 'Combat weapons', icon: 'fas fa-sword' },
        armor: { description: 'Protective equipment', icon: 'fas fa-shield-alt' },
        material: { description: 'Crafting materials', icon: 'fas fa-hammer' }
      },
      profession_relevance: {},
      metadata: {
        description: 'Heroics loot data (fallback)',
        version: '1.0',
        total_heroics: 0,
        total_loot_items: 0
      },
      source_info: {
        generator: 'SWGDB',
        attribution_text: 'Generated by SWGDB'
      }
    };
  }

  loadLiveLootData() {
    try {
      const lootLogsDir = path.join(__dirname, '../../src/data/loot_logs');
      if (!fs.existsSync(lootLogsDir)) {
        console.warn('Live loot logs directory not found:', lootLogsDir);
        this.liveLootData = [];
        return;
      }

      const lootFiles = fs.readdirSync(lootLogsDir)
        .filter(file => file.startsWith('heroic_loot_logs_') && file.endsWith('.json'))
        .sort()
        .slice(-3); // Get latest 3 files

      const allEntries = [];
      for (const file of lootFiles) {
        try {
          const filePath = path.join(lootLogsDir, file);
          const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
          if (data.loot_entries && Array.isArray(data.loot_entries)) {
            allEntries.push(...data.loot_entries);
          }
        } catch (error) {
          console.error(`Error loading live loot file ${file}:`, error);
        }
      }

      // Get recent entries (last 24 hours)
      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      this.liveLootData = allEntries
        .filter(entry => {
          try {
            return new Date(entry.timestamp) > oneDayAgo;
          } catch {
            return false;
          }
        })
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 50); // Limit to 50 most recent

      console.log(`Loaded ${this.liveLootData.length} recent loot entries`);
    } catch (error) {
      console.error('Error loading live loot data:', error);
      this.liveLootData = [];
    }
  }

  render(data) {
    const { heroics, rarityLevels, lootTypes, professionRelevance } = data;
    
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${data.title}</title>
    <meta name="description" content="${data.description}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --common-color: #9d9d9d;
            --uncommon-color: #1eff00;
            --rare-color: #0070dd;
            --epic-color: #a335ee;
            --legendary-color: #ff8000;
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .main-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            margin: 20px auto;
            max-width: 1600px;
            overflow: hidden;
        }

        .header-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header-section h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header-section p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .content-section {
            padding: 30px;
        }

        .filters-section {
            background: var(--light-color);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            margin-bottom: 20px;
        }

        .filter-group h4 {
            color: var(--dark-color);
            margin-bottom: 15px;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .filter-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .filter-btn {
            background: white;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 0.9rem;
        }

        .filter-btn.active {
            background: var(--primary-color);
            color: white;
        }

        .filter-btn:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .heroic-section {
            margin-bottom: 40px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .heroic-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }

        .heroic-header h2 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .heroic-header p {
            margin: 5px 0 0 0;
            opacity: 0.9;
        }

        .boss-section {
            margin: 20px;
            padding: 20px;
            background: var(--light-color);
            border-radius: 8px;
        }

        .boss-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
        }

        .boss-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        .boss-level {
            background: var(--primary-color);
            color: white;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .loot-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }

        .loot-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border-left: 4px solid var(--primary-color);
        }

        .loot-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        .loot-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .loot-name {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--dark-color);
        }

        .loot-rarity {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .rarity-common { background: var(--common-color); color: white; }
        .rarity-uncommon { background: var(--uncommon-color); color: var(--dark-color); }
        .rarity-rare { background: var(--rare-color); color: white; }
        .rarity-epic { background: var(--epic-color); color: white; }
        .rarity-legendary { background: var(--legendary-color); color: white; }

        .loot-type {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            font-size: 0.9rem;
            color: var(--secondary-color);
        }

        .loot-type i {
            margin-right: 8px;
            width: 16px;
        }

        .loot-stats {
            margin: 10px 0;
            font-size: 0.85rem;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 4px;
        }

        .stat-label {
            font-weight: 500;
            color: var(--secondary-color);
        }

        .stat-value {
            font-weight: 600;
            color: var(--dark-color);
        }

        .loot-description {
            font-size: 0.9rem;
            color: var(--secondary-color);
            margin-top: 10px;
            line-height: 1.4;
        }

        .drop-chance {
            background: var(--warning-color);
            color: var(--dark-color);
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 8px;
            display: inline-block;
        }

        .use-case {
            background: var(--info-color);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8rem;
            margin-top: 8px;
            display: inline-block;
        }

        .source-attribution {
            background: var(--light-color);
            padding: 15px;
            border-radius: 8px;
            margin-top: 30px;
            text-align: center;
            font-size: 0.9rem;
            color: var(--secondary-color);
        }

        .no-results {
            text-align: center;
            padding: 40px;
            color: var(--secondary-color);
            font-size: 1.1rem;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: var(--primary-color);
        }

        @media (max-width: 768px) {
            .loot-grid {
                grid-template-columns: 1fr;
            }
            
            .filter-buttons {
                justify-content: center;
            }
            
            .boss-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="header-section">
            <h1><i class="fas fa-treasure-chest"></i> Heroics Loot Table</h1>
            <p>Comprehensive loot information for all heroic instances</p>
        </div>

        <div class="content-section">
            <div class="filters-section">
                <div class="row">
                    <div class="col-md-3">
                        <div class="filter-group">
                            <h4><i class="fas fa-filter"></i> Heroic Instance</h4>
                            <div class="filter-buttons">
                                <button class="filter-btn active" data-filter="heroic" data-value="all">All Heroics</button>
                                ${Object.keys(heroics).map(heroicId => `
                                    <button class="filter-btn" data-filter="heroic" data-value="${heroicId}">${heroics[heroicId].name}</button>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="filter-group">
                            <h4><i class="fas fa-gem"></i> Rarity</h4>
                            <div class="filter-buttons">
                                <button class="filter-btn active" data-filter="rarity" data-value="all">All Rarities</button>
                                ${Object.keys(rarityLevels).map(rarity => `
                                    <button class="filter-btn" data-filter="rarity" data-value="${rarity}">${rarity.charAt(0).toUpperCase() + rarity.slice(1)}</button>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="filter-group">
                            <h4><i class="fas fa-tag"></i> Item Type</h4>
                            <div class="filter-buttons">
                                <button class="filter-btn active" data-filter="type" data-value="all">All Types</button>
                                ${Object.keys(lootTypes).map(type => `
                                    <button class="filter-btn" data-filter="type" data-value="${type}">${type.charAt(0).toUpperCase() + type.slice(1)}</button>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="filter-group">
                            <h4><i class="fas fa-user-tie"></i> Profession</h4>
                            <div class="filter-buttons">
                                <button class="filter-btn active" data-filter="profession" data-value="all">All Professions</button>
                                ${Object.keys(professionRelevance).map(profession => `
                                    <button class="filter-btn" data-filter="profession" data-value="${profession}">${profession.charAt(0).toUpperCase() + profession.slice(1)}</button>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="lootContainer">
                ${this.renderLootSections(heroics)}
            </div>

            <div class="source-attribution">
                <i class="fas fa-database"></i> Generated by SWGDB
            </div>
        </div>
    </div>

    <script>
        // Loot data from server
        const lootData = ${JSON.stringify(heroics)};
        const rarityLevels = ${JSON.stringify(rarityLevels)};
        const lootTypes = ${JSON.stringify(lootTypes)};
        const professionRelevance = ${JSON.stringify(professionRelevance)};

        // Filter state
        let activeFilters = {
            heroic: 'all',
            rarity: 'all',
            type: 'all',
            profession: 'all'
        };

        // Initialize filters
        document.addEventListener('DOMContentLoaded', function() {
            initializeFilters();
        });

        function initializeFilters() {
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const filterType = this.dataset.filter;
                    const filterValue = this.dataset.value;
                    
                    // Update active button
                    document.querySelectorAll(\`[data-filter="\${filterType}"]\`).forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update filter state
                    activeFilters[filterType] = filterValue;
                    
                    // Apply filters
                    applyFilters();
                });
            });
        }

        function applyFilters() {
            const container = document.getElementById('lootContainer');
            container.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';
            
            setTimeout(() => {
                const filteredData = filterLootData();
                container.innerHTML = renderLootSections(filteredData);
            }, 100);
        }

        function filterLootData() {
            const filtered = {};
            
            Object.keys(lootData).forEach(heroicId => {
                if (activeFilters.heroic !== 'all' && activeFilters.heroic !== heroicId) {
                    return;
                }
                
                const heroic = lootData[heroicId];
                const filteredBosses = heroic.bosses.filter(boss => {
                    const filteredLoot = boss.loot.filter(item => {
                        // Rarity filter
                        if (activeFilters.rarity !== 'all' && item.rarity !== activeFilters.rarity) {
                            return false;
                        }
                        
                        // Type filter
                        if (activeFilters.type !== 'all' && item.type !== activeFilters.type) {
                            return false;
                        }
                        
                        // Profession filter
                        if (activeFilters.profession !== 'all') {
                            const relevantItems = professionRelevance[activeFilters.profession] || [];
                            if (!relevantItems.includes(item.name)) {
                                return false;
                            }
                        }
                        
                        return true;
                    });
                    
                    return filteredLoot.length > 0;
                });
                
                if (filteredBosses.length > 0) {
                    filtered[heroicId] = {
                        ...heroic,
                        bosses: filteredBosses
                    };
                }
            });
            
            return filtered;
        }

        function renderLootSections(data) {
            if (Object.keys(data).length === 0) {
                return '<div class="no-results"><i class="fas fa-search"></i> No loot items match the current filters</div>';
            }
            
            return Object.keys(data).map(heroicId => {
                const heroic = data[heroicId];
                return \`
                    <div class="heroic-section">
                        <div class="heroic-header">
                            <h2>\${heroic.name}</h2>
                            <p><i class="fas fa-globe"></i> \${heroic.planet}</p>
                        </div>
                        \${heroic.bosses.map(boss => \`
                            <div class="boss-section">
                                <div class="boss-header">
                                    <div class="boss-name">\${boss.name}</div>
                                    <div class="boss-level">Level \${boss.level}</div>
                                </div>
                                <div class="loot-grid">
                                    \${boss.loot.map(item => \`
                                        <div class="loot-item">
                                            <div class="loot-header">
                                                <div class="loot-name">\${item.name}</div>
                                                <div class="loot-rarity rarity-\${item.rarity}">\${item.rarity}</div>
                                            </div>
                                            <div class="loot-type">
                                                <i class="\${lootTypes[item.type]?.icon || 'fas fa-question'}"></i>
                                                \${lootTypes[item.type]?.description || item.type}
                                            </div>
                                            \${item.stats ? \`
                                                <div class="loot-stats">
                                                    \${Object.entries(item.stats).map(([key, value]) => \`
                                                        <div class="stat-item">
                                                            <span class="stat-label">\${key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}:</span>
                                                            <span class="stat-value">\${value}</span>
                                                        </div>
                                                    \`).join('')}
                                                </div>
                                            \` : ''}
                                            <div class="drop-chance">
                                                <i class="fas fa-percentage"></i> \${item.drop_chance}% Drop Chance
                                            </div>
                                            <div class="use-case">
                                                <i class="fas fa-info-circle"></i> \${item.use_case}
                                            </div>
                                            <div class="loot-description">\${item.description}</div>
                                        </div>
                                    \`).join('')}
                                </div>
                            </div>
                        \`).join('')}
                    </div>
                \`;
            }).join('');
        }
    </script>
</body>
</html>
    `;
  }
}; 